/* This file is for your main application css. */
$icon-font-path: '~bootstrap-sass/assets/fonts/bootstrap/';
@import '~bootstrap-sass/assets/stylesheets/_bootstrap.scss';
@import url('https://fonts.googleapis.com/css?family=Roboto+Mono');
@import 'reset.scss';
@import 'variables.scss';
@import 'theme.scss';

.btn-black {
  background-color: black;
  color: white;
}
.btn-red {
  background-color: red;
  color: white;
}
.btn-orange {
  background-color: orange;
  color: white;
}

// ------------------------------ \\
//              BASE              \\
// ------------------------------ \\
* {
  box-sizing: border-box;
}

body {
  padding: $padding * 2;
  font-family: 'Roboto Mono', monospace;
  font-size: 16px;
  font-weight: 400;
  letter-spacing: -0.015em;
  @include color('text-color');
  @include background-color('dark-background-color');
}

.container {
  box-shadow: 0 0 50px -15px rgba(0,0,0,0.2);  @include background-color('background-color');
}


// ------------------------------ \\
//              PINS              \\
// ------------------------------ \\
.pinout-board {
  position: relative;
  max-width: 480px;
  margin: ($padding * 10) auto;
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  justify-content: center;
  align-items: flex-start;
  align-content: flex-start;
  z-index: 2;
  &:after {
    content: "";
    position: absolute;
    left: 50%;
    width: 80px;
    height: 100%;
    border: 1px solid #bdc3c7;
    border-radius: $border-radius;
    background-color: #f2f4fc;
    transform: translateX(-50%);
    z-index: -1;
    .theme-dark & {
      background-color: map-deep-get($themes, 'dark', 'board-background-color');
      border-color: map-deep-get($themes, 'dark', 'border-color');
    }
  }
}

.pin {
  flex-basis: 50%;
  display: flex;
  align-items: center;
  position: relative;
  margin: 2px 0;
  padding: $padding;
  border-radius: 20px;
  cursor: pointer;
  box-shadow: -($padding * 9) 0 100px 0 rgba(0,0,0,0);
  transition: background-color 0.1s ease, box-shadow 0.4s ease;
  &:hover, &.selected:not(.disabled) {
    box-shadow: -($padding * 3) 0 50px -10px darken(map-deep-get($themes, 'light', 'dark-background-color'), 15%);
    @include background-color('background-color');
    .theme-dark & {
      box-shadow: -$padding 0 50px -10px darken(map-deep-get($themes, 'dark', 'dark-background-color'), 15%);
    }
  }
  &:hover {
    z-index: 2;
  }
  &:nth-of-type(odd) {
    flex-direction: row-reverse;
    box-shadow: ($padding * 9) 0 100px 0 rgba(0,0,0,0);
    &:hover, &.selected:not(.disabled) {
      box-shadow: ($padding * 3) 0 50px -10px darken(map-deep-get($themes, 'light', 'dark-background-color'), 15%);
      .theme-dark & {
        box-shadow: $padding 0 50px -10px darken(map-deep-get($themes, 'dark', 'dark-background-color'), 15%);
      }
    }
  }
  &.disabled {
    cursor: default;
  }
}

.pin__marker {
  .pin:not(.disabled).selected & {
    transform: scale(1.25);
    transition: all 0.2s ease-out;
  }
  display: flex;
  justify-content: center;
  align-items: center;
  margin-right: $padding * 2;
  width: 24px;
  height: 24px;
  border: 1px solid currentColor;
  border-radius: 50%;
  transition: all 0.075s ease-in;
  @include background-color('gray');
  .theme-dark & {
    border-color: map-deep-get($themes, 'dark', 'border-color');
  }
  &:after {
    content: "";
    display: block;
    width: 12px;
    height: 12px;
    background-color: #fff;
    border: 1px solid currentColor;
    border-radius: 50%;
    .theme-dark & {
      border-color: map-deep-get($themes, 'dark', 'border-color');
    }
  }
  .pin:nth-of-type(odd) & {
    margin-right: 0;
    margin-left: $padding * 2;
  }
  .pin:first-of-type & {
    border-radius: $border-radius;
  }
  // --- PIN COLORS --- \\
  .pin[data-pin-type="3v"] & {
    @include background-color('dark-red');
  }
  .pin[data-pin-type="5v"] & {
    @include background-color('red');
  }
  .pin[data-pin-type="i2c"] & {
    @include background-color('blue');
  }
  .pin[data-pin-type="ground"] & {
    @include background-color('ground');
  }
  .pin[data-pin-type="gpio"] & {
    @include background-color('green');
  }
  .pin[data-pin-type="xd"] & {
    @include background-color('orange');
  }
  .pin[data-pin-type="spi"] & {
    @include background-color('purple');
  }
  .pin[data-pin-type="eeprom"] & {
    @include background-color('yellow');
  }
}

.pin__status-indicator {
  position: relative;
  visibility: hidden;
  width: 0;
  height: 1em;
  line-height: 1;
  opacity: 0;
  transition: all 0.2s ease;
  &:before {
    position: absolute;
    top: 0;
    color: currentColor;
  }
  .pin[data-pin-direction="input"] &,
  .pin[data-pin-direction="output"] & {
    visibility: visible;
    width: 1em;
    opacity: 1;
    &:after {
      display: block;
      position: absolute;
      top: calc(-100% - #{$padding});
      left: 50%;
      padding: $light-padding;
      line-height: 1;
      font-size: 12px;
      color: #fff;
      background-color: #333;
      border-radius: $border-radius;
      opacity: 0;
      pointer-events: none;
      transform: translate(-50%, -#{$light-padding/2});
      transition: all 0.2s ease-in;
    }
    &:hover:after {
      opacity: 1;
      transform: translate(-50%, 0);
      transition: all 0.2s ease-out;
    }
  }
  .pin[data-pin-direction="input"] & {
    &:before {
      content: "\276E";
      left: 0;
    }
    &:after {
      content: "input";
    }
  }
  .pin[data-pin-direction="output"] & {
    &:before {
      content: "\276F";
      left: 0;
    }
    &:after {
      content: "output";
    }
  }
  .pin:nth-of-type(odd)[data-pin-direction="input"] &:before {
    content: "\276F";
    left: auto;
    right: 0;
  }
  .pin:nth-of-type(odd)[data-pin-direction="output"] &:before {
    content: "\276E";
    left: auto;
    right: 0;
  }
  .pin[data-pin-status="high"] & {
    @include color('green');
  }
  .pin[data-pin-status="low"] & {
    @include color('red');
  }
}

.pin__label {
  flex-grow: 1;
  display: flex;
  flex-direction: row;
  flex-wrap: nowrap;
  justify-content: space-between;
  align-items: center;
  align-content: flex-start;
  .pin:nth-of-type(odd) & {
    flex-direction: row-reverse;
  }
}

.pin__label-item {
  margin: 0 $light-padding;
  font-size: 16px;
  line-height: 1;
  @include color('light-text-color');
  &--outline {
    padding: ($light-padding / 2) $light-padding;
    font-size: 12px;
    border: 1px solid currentColor;
    border-radius: $border-radius;
  }
  &--title {
    @include color('text-color');
    .pin[data-pin-status="high"] & {
      @include color('green');
    }
    .pin[data-pin-status="low"] & {
      @include color('red');
    }
  }
}

.pin__menu {
  position: absolute;
  left: ($padding-basis * 10);
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: space-around;
  border-radius: 20px;
  opacity: 1;
  box-shadow: 0 0 0 map-deep-get($themes, 'light', 'background-color');
  transform: scale(1);
  transform-origin: left center;
  transition: all 0.4s ease-out;
  @include background-color('background-color');
  .theme-dark & {
    box-shadow: 0 0 0 map-deep-get($themes, 'dark', 'background-color');
  }
  .pin:nth-of-type(odd) & {
    flex-direction: row-reverse;
    left: auto;
    right: ($padding-basis * 10);
    transform-origin: right center;
  }
  .pin:not(.selected) & {
    opacity: 0;
    box-shadow: 0 0 50px transparent;
    transform: scale(0.5);
    transition: all 0.3s 0.2s ease-out;
  }
  .pin.disabled & {
    display: none;
  }
}

.pin__menu-item {
  padding: ($light-padding / 2) $light-padding;
  font-size: 12px;
  border-width: 1px;
  border-style: solid;
  border-radius: $border-radius;
  opacity: 1;
  transform: translateX(0) scaleX(1);
  transition: all 0.3s 0.25s cubic-bezier(0, 0, 0, 1);
  @include border-color('gray');
  &:nth-of-type(1) {
    transition-delay: 0.29s;
  }
  &:hover {
    text-decoration: underline;
    transition: background-color 0.1s ease;
    @include background-color('dark-background-color');
  }
  .pin:not(.selected) & {
    opacity: 0;
    transform: translateX(-$padding * 2) scaleX(0.97);
    transition: opacity 0.3s ease, transform 0.3s 0.1s cubic-bezier(0.25, 0, 1, 0);
  }
  .pin:nth-of-type(odd):not(.selected) & {
    transform: translateX($padding * 2) scaleX(0.97);
  }
  &.active {
    @include background-color('dark-background-color');
    @include border-color('text-color');
  }
}

.hidden {
  display: none;
}

.invisible {
  visibility: hidden;
}
